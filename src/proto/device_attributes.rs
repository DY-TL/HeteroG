// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/framework/device_attributes.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct InterconnectLink {
    // message fields
    pub device_id: i32,
    pub field_type: ::std::string::String,
    pub strength: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InterconnectLink {
    fn default() -> &'a InterconnectLink {
        <InterconnectLink as ::protobuf::Message>::default_instance()
    }
}

impl InterconnectLink {
    pub fn new() -> InterconnectLink {
        ::std::default::Default::default()
    }

    // int32 device_id = 1;


    pub fn get_device_id(&self) -> i32 {
        self.device_id
    }
    pub fn clear_device_id(&mut self) {
        self.device_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_device_id(&mut self, v: i32) {
        self.device_id = v;
    }

    // string type = 2;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // int32 strength = 3;


    pub fn get_strength(&self) -> i32 {
        self.strength
    }
    pub fn clear_strength(&mut self) {
        self.strength = 0;
    }

    // Param is passed by value, moved
    pub fn set_strength(&mut self, v: i32) {
        self.strength = v;
    }
}

impl ::protobuf::Message for InterconnectLink {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.device_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.strength = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.device_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.device_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field_type);
        }
        if self.strength != 0 {
            my_size += ::protobuf::rt::value_size(3, self.strength, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.device_id != 0 {
            os.write_int32(1, self.device_id)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(2, &self.field_type)?;
        }
        if self.strength != 0 {
            os.write_int32(3, self.strength)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InterconnectLink {
        InterconnectLink::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "device_id",
                    |m: &InterconnectLink| { &m.device_id },
                    |m: &mut InterconnectLink| { &mut m.device_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &InterconnectLink| { &m.field_type },
                    |m: &mut InterconnectLink| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "strength",
                    |m: &InterconnectLink| { &m.strength },
                    |m: &mut InterconnectLink| { &mut m.strength },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<InterconnectLink>(
                    "InterconnectLink",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InterconnectLink {
        static mut instance: ::protobuf::lazy::Lazy<InterconnectLink> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const InterconnectLink,
        };
        unsafe {
            instance.get(InterconnectLink::new)
        }
    }
}

impl ::protobuf::Clear for InterconnectLink {
    fn clear(&mut self) {
        self.device_id = 0;
        self.field_type.clear();
        self.strength = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InterconnectLink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InterconnectLink {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LocalLinks {
    // message fields
    pub link: ::protobuf::RepeatedField<InterconnectLink>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LocalLinks {
    fn default() -> &'a LocalLinks {
        <LocalLinks as ::protobuf::Message>::default_instance()
    }
}

impl LocalLinks {
    pub fn new() -> LocalLinks {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.InterconnectLink link = 1;


    pub fn get_link(&self) -> &[InterconnectLink] {
        &self.link
    }
    pub fn clear_link(&mut self) {
        self.link.clear();
    }

    // Param is passed by value, moved
    pub fn set_link(&mut self, v: ::protobuf::RepeatedField<InterconnectLink>) {
        self.link = v;
    }

    // Mutable pointer to the field.
    pub fn mut_link(&mut self) -> &mut ::protobuf::RepeatedField<InterconnectLink> {
        &mut self.link
    }

    // Take field
    pub fn take_link(&mut self) -> ::protobuf::RepeatedField<InterconnectLink> {
        ::std::mem::replace(&mut self.link, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for LocalLinks {
    fn is_initialized(&self) -> bool {
        for v in &self.link {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.link)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.link {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.link {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LocalLinks {
        LocalLinks::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InterconnectLink>>(
                    "link",
                    |m: &LocalLinks| { &m.link },
                    |m: &mut LocalLinks| { &mut m.link },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LocalLinks>(
                    "LocalLinks",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LocalLinks {
        static mut instance: ::protobuf::lazy::Lazy<LocalLinks> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LocalLinks,
        };
        unsafe {
            instance.get(LocalLinks::new)
        }
    }
}

impl ::protobuf::Clear for LocalLinks {
    fn clear(&mut self) {
        self.link.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LocalLinks {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocalLinks {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeviceLocality {
    // message fields
    pub bus_id: i32,
    pub numa_node: i32,
    pub links: ::protobuf::SingularPtrField<LocalLinks>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeviceLocality {
    fn default() -> &'a DeviceLocality {
        <DeviceLocality as ::protobuf::Message>::default_instance()
    }
}

impl DeviceLocality {
    pub fn new() -> DeviceLocality {
        ::std::default::Default::default()
    }

    // int32 bus_id = 1;


    pub fn get_bus_id(&self) -> i32 {
        self.bus_id
    }
    pub fn clear_bus_id(&mut self) {
        self.bus_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_bus_id(&mut self, v: i32) {
        self.bus_id = v;
    }

    // int32 numa_node = 2;


    pub fn get_numa_node(&self) -> i32 {
        self.numa_node
    }
    pub fn clear_numa_node(&mut self) {
        self.numa_node = 0;
    }

    // Param is passed by value, moved
    pub fn set_numa_node(&mut self, v: i32) {
        self.numa_node = v;
    }

    // .tensorflow.LocalLinks links = 3;


    pub fn get_links(&self) -> &LocalLinks {
        self.links.as_ref().unwrap_or_else(|| LocalLinks::default_instance())
    }
    pub fn clear_links(&mut self) {
        self.links.clear();
    }

    pub fn has_links(&self) -> bool {
        self.links.is_some()
    }

    // Param is passed by value, moved
    pub fn set_links(&mut self, v: LocalLinks) {
        self.links = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_links(&mut self) -> &mut LocalLinks {
        if self.links.is_none() {
            self.links.set_default();
        }
        self.links.as_mut().unwrap()
    }

    // Take field
    pub fn take_links(&mut self) -> LocalLinks {
        self.links.take().unwrap_or_else(|| LocalLinks::new())
    }
}

impl ::protobuf::Message for DeviceLocality {
    fn is_initialized(&self) -> bool {
        for v in &self.links {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.bus_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.numa_node = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.links)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.bus_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.bus_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.numa_node != 0 {
            my_size += ::protobuf::rt::value_size(2, self.numa_node, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.links.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.bus_id != 0 {
            os.write_int32(1, self.bus_id)?;
        }
        if self.numa_node != 0 {
            os.write_int32(2, self.numa_node)?;
        }
        if let Some(ref v) = self.links.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeviceLocality {
        DeviceLocality::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "bus_id",
                    |m: &DeviceLocality| { &m.bus_id },
                    |m: &mut DeviceLocality| { &mut m.bus_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "numa_node",
                    |m: &DeviceLocality| { &m.numa_node },
                    |m: &mut DeviceLocality| { &mut m.numa_node },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LocalLinks>>(
                    "links",
                    |m: &DeviceLocality| { &m.links },
                    |m: &mut DeviceLocality| { &mut m.links },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceLocality>(
                    "DeviceLocality",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeviceLocality {
        static mut instance: ::protobuf::lazy::Lazy<DeviceLocality> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeviceLocality,
        };
        unsafe {
            instance.get(DeviceLocality::new)
        }
    }
}

impl ::protobuf::Clear for DeviceLocality {
    fn clear(&mut self) {
        self.bus_id = 0;
        self.numa_node = 0;
        self.links.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeviceLocality {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeviceLocality {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeviceAttributes {
    // message fields
    pub name: ::std::string::String,
    pub device_type: ::std::string::String,
    pub memory_limit: i64,
    pub locality: ::protobuf::SingularPtrField<DeviceLocality>,
    pub incarnation: u64,
    pub physical_device_desc: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeviceAttributes {
    fn default() -> &'a DeviceAttributes {
        <DeviceAttributes as ::protobuf::Message>::default_instance()
    }
}

impl DeviceAttributes {
    pub fn new() -> DeviceAttributes {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string device_type = 2;


    pub fn get_device_type(&self) -> &str {
        &self.device_type
    }
    pub fn clear_device_type(&mut self) {
        self.device_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_type(&mut self, v: ::std::string::String) {
        self.device_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_type(&mut self) -> &mut ::std::string::String {
        &mut self.device_type
    }

    // Take field
    pub fn take_device_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.device_type, ::std::string::String::new())
    }

    // int64 memory_limit = 4;


    pub fn get_memory_limit(&self) -> i64 {
        self.memory_limit
    }
    pub fn clear_memory_limit(&mut self) {
        self.memory_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_limit(&mut self, v: i64) {
        self.memory_limit = v;
    }

    // .tensorflow.DeviceLocality locality = 5;


    pub fn get_locality(&self) -> &DeviceLocality {
        self.locality.as_ref().unwrap_or_else(|| DeviceLocality::default_instance())
    }
    pub fn clear_locality(&mut self) {
        self.locality.clear();
    }

    pub fn has_locality(&self) -> bool {
        self.locality.is_some()
    }

    // Param is passed by value, moved
    pub fn set_locality(&mut self, v: DeviceLocality) {
        self.locality = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_locality(&mut self) -> &mut DeviceLocality {
        if self.locality.is_none() {
            self.locality.set_default();
        }
        self.locality.as_mut().unwrap()
    }

    // Take field
    pub fn take_locality(&mut self) -> DeviceLocality {
        self.locality.take().unwrap_or_else(|| DeviceLocality::new())
    }

    // fixed64 incarnation = 6;


    pub fn get_incarnation(&self) -> u64 {
        self.incarnation
    }
    pub fn clear_incarnation(&mut self) {
        self.incarnation = 0;
    }

    // Param is passed by value, moved
    pub fn set_incarnation(&mut self, v: u64) {
        self.incarnation = v;
    }

    // string physical_device_desc = 7;


    pub fn get_physical_device_desc(&self) -> &str {
        &self.physical_device_desc
    }
    pub fn clear_physical_device_desc(&mut self) {
        self.physical_device_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_physical_device_desc(&mut self, v: ::std::string::String) {
        self.physical_device_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_physical_device_desc(&mut self) -> &mut ::std::string::String {
        &mut self.physical_device_desc
    }

    // Take field
    pub fn take_physical_device_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.physical_device_desc, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeviceAttributes {
    fn is_initialized(&self) -> bool {
        for v in &self.locality {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.device_type)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.memory_limit = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.locality)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.incarnation = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.physical_device_desc)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.device_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.device_type);
        }
        if self.memory_limit != 0 {
            my_size += ::protobuf::rt::value_size(4, self.memory_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.locality.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.incarnation != 0 {
            my_size += 9;
        }
        if !self.physical_device_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.physical_device_desc);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.device_type.is_empty() {
            os.write_string(2, &self.device_type)?;
        }
        if self.memory_limit != 0 {
            os.write_int64(4, self.memory_limit)?;
        }
        if let Some(ref v) = self.locality.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.incarnation != 0 {
            os.write_fixed64(6, self.incarnation)?;
        }
        if !self.physical_device_desc.is_empty() {
            os.write_string(7, &self.physical_device_desc)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeviceAttributes {
        DeviceAttributes::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &DeviceAttributes| { &m.name },
                    |m: &mut DeviceAttributes| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "device_type",
                    |m: &DeviceAttributes| { &m.device_type },
                    |m: &mut DeviceAttributes| { &mut m.device_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "memory_limit",
                    |m: &DeviceAttributes| { &m.memory_limit },
                    |m: &mut DeviceAttributes| { &mut m.memory_limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DeviceLocality>>(
                    "locality",
                    |m: &DeviceAttributes| { &m.locality },
                    |m: &mut DeviceAttributes| { &mut m.locality },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                    "incarnation",
                    |m: &DeviceAttributes| { &m.incarnation },
                    |m: &mut DeviceAttributes| { &mut m.incarnation },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "physical_device_desc",
                    |m: &DeviceAttributes| { &m.physical_device_desc },
                    |m: &mut DeviceAttributes| { &mut m.physical_device_desc },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceAttributes>(
                    "DeviceAttributes",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeviceAttributes {
        static mut instance: ::protobuf::lazy::Lazy<DeviceAttributes> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeviceAttributes,
        };
        unsafe {
            instance.get(DeviceAttributes::new)
        }
    }
}

impl ::protobuf::Clear for DeviceAttributes {
    fn clear(&mut self) {
        self.name.clear();
        self.device_type.clear();
        self.memory_limit = 0;
        self.locality.clear();
        self.incarnation = 0;
        self.physical_device_desc.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeviceAttributes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeviceAttributes {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n1tensorflow/core/framework/device_attributes.proto\x12\ntensorflow\"_\
    \n\x10InterconnectLink\x12\x1b\n\tdevice_id\x18\x01\x20\x01(\x05R\x08dev\
    iceId\x12\x12\n\x04type\x18\x02\x20\x01(\tR\x04type\x12\x1a\n\x08strengt\
    h\x18\x03\x20\x01(\x05R\x08strength\">\n\nLocalLinks\x120\n\x04link\x18\
    \x01\x20\x03(\x0b2\x1c.tensorflow.InterconnectLinkR\x04link\"r\n\x0eDevi\
    ceLocality\x12\x15\n\x06bus_id\x18\x01\x20\x01(\x05R\x05busId\x12\x1b\n\
    \tnuma_node\x18\x02\x20\x01(\x05R\x08numaNode\x12,\n\x05links\x18\x03\
    \x20\x01(\x0b2\x16.tensorflow.LocalLinksR\x05links\"\xf6\x01\n\x10Device\
    Attributes\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x1f\n\x0bde\
    vice_type\x18\x02\x20\x01(\tR\ndeviceType\x12!\n\x0cmemory_limit\x18\x04\
    \x20\x01(\x03R\x0bmemoryLimit\x126\n\x08locality\x18\x05\x20\x01(\x0b2\
    \x1a.tensorflow.DeviceLocalityR\x08locality\x12\x20\n\x0bincarnation\x18\
    \x06\x20\x01(\x06R\x0bincarnation\x120\n\x14physical_device_desc\x18\x07\
    \x20\x01(\tR\x12physicalDeviceDescBv\n\x18org.tensorflow.frameworkB\x16D\
    eviceAttributesProtosP\x01Z=github.com/tensorflow/tensorflow/tensorflow/\
    go/core/framework\xf8\x01\x01J\xf1\r\n\x06\x12\x04\0\03\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x13\n\x08\n\x01\x08\
    \x12\x03\x03\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x03\0\x1f\n\x08\n\x01\x08\
    \x12\x03\x04\07\n\t\n\x02\x08\x08\x12\x03\x04\07\n\x08\n\x01\x08\x12\x03\
    \x05\0\"\n\t\n\x02\x08\n\x12\x03\x05\0\"\n\x08\n\x01\x08\x12\x03\x06\01\
    \n\t\n\x02\x08\x01\x12\x03\x06\01\n\x08\n\x01\x08\x12\x03\x07\0T\n\t\n\
    \x02\x08\x0b\x12\x03\x07\0T\n\n\n\x02\x04\0\x12\x04\t\0\r\x01\n\n\n\x03\
    \x04\0\x01\x12\x03\t\x08\x18\n\x0b\n\x04\x04\0\x02\0\x12\x03\n\x02\x16\n\
    \r\n\x05\x04\0\x02\0\x04\x12\x04\n\x02\t\x1a\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\n\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\n\x08\x11\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\n\x14\x15\n\x0b\n\x04\x04\0\x02\x01\x12\x03\
    \x0b\x02\x12\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x0b\x02\n\x16\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x0b\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x0b\t\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0b\x10\x11\n\x0b\
    \n\x04\x04\0\x02\x02\x12\x03\x0c\x02\x15\n\r\n\x05\x04\0\x02\x02\x04\x12\
    \x04\x0c\x02\x0b\x12\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0c\x02\x07\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0c\x08\x10\n\x0c\n\x05\x04\0\x02\
    \x02\x03\x12\x03\x0c\x13\x14\n\n\n\x02\x04\x01\x12\x04\x0f\0\x11\x01\n\n\
    \n\x03\x04\x01\x01\x12\x03\x0f\x08\x12\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x10\x02%\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x10\x02\n\n\x0c\n\x05\
    \x04\x01\x02\0\x06\x12\x03\x10\x0b\x1b\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\x10\x1c\x20\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x10#$\n\n\n\x02\
    \x04\x02\x12\x04\x13\0\x1d\x01\n\n\n\x03\x04\x02\x01\x12\x03\x13\x08\x16\
    \n\x89\x01\n\x04\x04\x02\x02\0\x12\x03\x16\x02\x13\x1a|\x20Optional\x20b\
    us\x20locality\x20of\x20device.\x20\x20Default\x20value\x20of\x200\x20me\
    ans\n\x20no\x20specific\x20locality.\x20\x20Specific\x20localities\x20ar\
    e\x20indexed\x20from\x201.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x16\x02\
    \x13\x18\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x16\x02\x07\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03\x16\x08\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\x16\x11\x12\n0\n\x04\x04\x02\x02\x01\x12\x03\x19\x02\x16\x1a#\x20Op\
    tional\x20NUMA\x20locality\x20of\x20device.\n\n\r\n\x05\x04\x02\x02\x01\
    \x04\x12\x04\x19\x02\x16\x13\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x19\
    \x02\x07\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x19\x08\x11\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03\x19\x14\x15\nB\n\x04\x04\x02\x02\x02\x12\
    \x03\x1c\x02\x17\x1a5\x20Optional\x20local\x20interconnect\x20links\x20t\
    o\x20other\x20devices.\n\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04\x1c\x02\
    \x19\x16\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03\x1c\x02\x0c\n\x0c\n\x05\
    \x04\x02\x02\x02\x01\x12\x03\x1c\r\x12\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03\x1c\x15\x16\n\n\n\x02\x04\x03\x12\x04\x1f\03\x01\n\n\n\x03\x04\
    \x03\x01\x12\x03\x1f\x08\x18\nC\n\x04\x04\x03\x02\0\x12\x03!\x02\x12\x1a\
    6\x20Fully\x20specified\x20name\x20of\x20the\x20device\x20within\x20a\
    \x20cluster.\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x04!\x02\x1f\x1a\n\x0c\n\
    \x05\x04\x03\x02\0\x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03!\t\r\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03!\x10\x11\n4\n\x04\
    \x04\x03\x02\x01\x12\x03$\x02\x19\x1a'\x20String\x20representation\x20of\
    \x20device_type.\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04$\x02!\x12\n\x0c\
    \n\x05\x04\x03\x02\x01\x05\x12\x03$\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x03$\t\x14\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03$\x17\x18\n2\
    \n\x04\x04\x03\x02\x02\x12\x03'\x02\x19\x1a%\x20Memory\x20capacity\x20of\
    \x20device\x20in\x20bytes.\n\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04'\x02$\
    \x19\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03'\x02\x07\n\x0c\n\x05\x04\
    \x03\x02\x02\x01\x12\x03'\x08\x14\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\
    \x03'\x17\x18\no\n\x04\x04\x03\x02\x03\x12\x03+\x02\x1e\x1ab\x20Platform\
    -specific\x20data\x20about\x20device\x20that\x20may\x20be\x20useful\n\
    \x20for\x20supporting\x20efficient\x20data\x20transfers.\n\n\r\n\x05\x04\
    \x03\x02\x03\x04\x12\x04+\x02'\x19\n\x0c\n\x05\x04\x03\x02\x03\x06\x12\
    \x03+\x02\x10\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03+\x11\x19\n\x0c\n\
    \x05\x04\x03\x02\x03\x03\x12\x03+\x1c\x1d\ny\n\x04\x04\x03\x02\x04\x12\
    \x03/\x02\x1a\x1al\x20A\x20device\x20is\x20assigned\x20a\x20global\x20un\
    ique\x20number\x20each\x20time\x20it\x20is\n\x20initialized.\x20\"incarn\
    ation\"\x20should\x20never\x20be\x200.\n\n\r\n\x05\x04\x03\x02\x04\x04\
    \x12\x04/\x02+\x1e\n\x0c\n\x05\x04\x03\x02\x04\x05\x12\x03/\x02\t\n\x0c\
    \n\x05\x04\x03\x02\x04\x01\x12\x03/\n\x15\n\x0c\n\x05\x04\x03\x02\x04\
    \x03\x12\x03/\x18\x19\nU\n\x04\x04\x03\x02\x05\x12\x032\x02\"\x1aH\x20St\
    ring\x20representation\x20of\x20the\x20physical\x20device\x20that\x20thi\
    s\x20device\x20maps\x20to.\n\n\r\n\x05\x04\x03\x02\x05\x04\x12\x042\x02/\
    \x1a\n\x0c\n\x05\x04\x03\x02\x05\x05\x12\x032\x02\x08\n\x0c\n\x05\x04\
    \x03\x02\x05\x01\x12\x032\t\x1d\n\x0c\n\x05\x04\x03\x02\x05\x03\x12\x032\
    \x20!b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
